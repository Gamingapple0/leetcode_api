{
    "easy": {
        "0": {
            "name": "Valid Parentheses",
            "problem": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nEvery close bracket has a corresponding open bracket of the same type.",
            "examples": "Example 1:\nInput: s = \"()\"\nOutput: true\nExample 2:\nInput: s = \"()[]{}\"\nOutput: true\nExample 3:\nInput: s = \"(]\"\nOutput: false",
            "constraints": "1 <= s.length <= 104\ns consists of parentheses only '()[]{}'."
        },
        "1": {
            "name": "Palindrome Number",
            "problem": "Given an integer x, return true if x is a palindrome, and false otherwise.",
            "examples": "Example 1:\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\nExample 2:\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\nExample 3:\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.",
            "constraints": "-231 <= x <= 231 - 1"
        },
        "2": {
            "name": "Two Sum",
            "problem": "Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
            "examples": "Example 1:\nInput: nums = [2, 7, 11, 15], target = 9\nOutput: [0, 1]\nExplanation: nums[0] + nums[1] == 9, so the output is [0, 1].\nExample 2:\nInput: nums = [3, 2, 4], target = 6\nOutput: [1, 2]\nExample 3:\nInput: nums = [3, 3], target = 6\nOutput: [0, 1]",
            "constraints": "2 <= nums.length <= 104\n-109 <= nums[i] <= 109\n-109 <= target <= 109\nOnly one valid answer exists."
        },
        "3": {
            "name": "Reverse Integer",
            "problem": "Given a 32-bit signed integer, reverse digits of an integer.\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [-231, 231 - 1].",
            "examples": "Example 1:\nInput: x = 123\nOutput: 321\nExample 2:\nInput: x = -123\nOutput: -321\nExample 3:\nInput: x = 120\nOutput: 21",
            "constraints": "-231 <= x <= 231 - 1"
        },
        "4": {
            "name": "Roman to Integer",
            "problem": "Given a Roman numeral, convert it to an integer.\nRoman numerals are represented by seven different symbols: I, V, X, L, C, D, and M.",
            "examples": "Example 1:\nInput: s = \"III\"\nOutput: 3\nExample 2:\nInput: s = \"IV\"\nOutput: 4\nExample 3:\nInput: s = \"IX\"\nOutput: 9",
            "constraints": "1 <= s.length <= 15\ns contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M')."
        },
        "5": {
            "name": "FizzBuzz",
            "problem": "Write a program that outputs the string representation of numbers from 1 to n.\nBut for multiples of three, it should output 'Fizz' instead of the number, and for the multiples of five, it should output 'Buzz'. For numbers that are multiples of both three and five, output 'FizzBuzz'.",
            "examples": "Example 1:\nInput: n = 3\nOutput: [\"1\", \"2\", \"Fizz\"]\nExample 2:\nInput: n = 5\nOutput: [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\"]\nExample 3:\nInput: n = 15\nOutput: [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\", \"14\", \"FizzBuzz\"]",
            "constraints": "1 <= n <= 104"
        }
    },
    "medium": {
        "0": {
            "name": "Longest Substring Without Repeating Characters",
            "problem": "Given a string s, find the length of the longest substring without repeating characters.",
            "examples": "Example 1:\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\nExample 2:\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\nExample 3:\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.",
            "constraints": "0 <= s.length <= 5 * 104\ns consists of English letters, digits, symbols, and spaces."
        },
        "1": {
            "name": "Container With Most Water",
            "problem": "Given n non-negative integers, where each integer represents a point at a coordinate (i, ai), n vertical bars are positioned by the coordinates (i, ai). You are going to draw,the ContainerWithMostWater n lines, where each line i is formed by a vertical bar, and both vertical bars of the line i are separated by one vertical unit. Write a function to find the maximum area of the rectangle, the ContainerWithMostWater the n lines will form.",
            "examples": "Example 1:\nInput: height = [1, 8, 6, 2, 5, 4, 8, 3, 7]\nOutput: 49\nExplanation: The above vertical lines can be seen visually. The two vertical lines with height 8 and 7 are together making up the rectangle with the most water, which is bound by lines 1 and 8. Therefore, the maximum area is 7 * 7 = 49.\nExample 2:\nInput: height = [1, 1]\nOutput: 1\nExample 3:\nInput: height = [4, 3, 2, 1, 4]\nOutput: 16",
            "constraints": "2 <= height.length <= 3 * 104\n0 <= height[i] <= 3 * 104"
        },
        "2": {
            "name": "Add Two Numbers",
            "problem": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored the ContainerWithMostWater in reverse order, and each of their nodes contains a single digit. Add the two numbers and return them as a linked list.",
            "examples": "Example 1:\nInput: l1 = [2, 4, 3], l2 = [5, 6, 4]\nOutput: [7, 0, 8]\nExplanation: 342 + 465 = 807.\nExample 2:\nInput: l1 = [0], l2 = [0]\nOutput: [0]\nExample 3:\nInput: l1 = [9, 9, 9, 9, 9, 9, 9], l2 = [9, 9, 9, 9]\nOutput: [8, 9, 9, 9, 0, 0, 0, 1]",
            "constraints": "The number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros."
        },
        "3": {
            "name": "3Sum",
            "problem": "Given an array nums of n integers, are there elements such that a + b + c = 0?\nFind all unique triplets in the array which gives the sum of zero.\nNotice that the solution set must not contain duplicate triplets.",
            "examples": "Example 1:\nInput: nums = [-1, 0, 1, 2, -1, -4]\nOutput: [[-1, -1, 2], [-1, 0, 1]]\nExample 2:\nInput: nums = []\nOutput: []\nExample 3:\nInput: nums = [0]\nOutput: []",
            "constraints": "0 <= nums.length <= 3000\n-105 <= nums[i] <= 105"
        },
        "4": {
            "name": "Longest Palindromic Substring",
            "problem": "Given a string s, find the longest palindromic substring in s.\nYou may assume that the maximum length of s is 1000.",
            "examples": "Example 1:\nInput: s = \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\nExample 2:\nInput: s = \"cbbd\"\nOutput: \"bb\"",
            "constraints": "1 <= s.length <= 1000\ns consist of only digits and English letters (lower-case and/or upper-case)."
        },
        "5": {
            "name": "Merge Two Sorted Lists",
            "problem": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.",
            "examples": "Example 1:\nInput: l1 = [1, 2, 4], l2 = [1, 3, 4]\nOutput: [1, 1, 2, 3, 4, 4]\nExample 2:\nInput: l1 = [], l2 = []\nOutput: []\nExample 3:\nInput: l1 = [], l2 = [0]\nOutput: [0]",
            "constraints": "The number of nodes in each linked list is in the range [0, 50].\n-100 <= Node.val <= 100\nBoth l1 and l2 are sorted in non-decreasing order."
        }
    },
    "hard": {
        "0": {
            "name": "Median of Two Sorted Arrays",
            "problem": "Given two sorted arrays nums1 and nums2 of size m and n, respectively, return the median of the two sorted arrays.\nFollow up: The overallContainerWithMostWater run time complexity should be O(log (m+n)).",
            "examples": "Example 1:\nInput: nums1 = [1, 3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1, 2, 3] and median is 2.\nExample 2:\nInput: nums1 = [1, 2], nums2 = [3, 4]\nOutput: 2.50000\nExplanation: merged array = [1, 2, 3, 4] and median is (2 + 3) / 2 = 2.5.\nExample 3:\nInput: nums1 = [0, 0], nums2 = [0, 0]\nOutput: 0.00000",
            "constraints": "nums1.length == m\nnums2.length == n\n0 <= m, n <= 1000\n-106 <= nums1[i], nums2[i] <= 106"
        },
        "1": {
            "name": "Regular Expression Matching",
            "problem": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*'.\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.",
            "examples": "Example 1:\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\nExample 2:\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\nExample 3:\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".",
            "constraints": "0 <= s.length <= 20\n0 <= p.length <= 30\ns contains only lowercase English letters.\np contains only lowercase English letters, '.', and '*'.\nIt is guaranteed for each appearance of '.' and '*', there will be a previous valid character to match."
        },
        "2": {
            "name": "Trapping Rain Water",
            "problem": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
            "examples": "Example 1:\nInput: height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\nOutput: 6\nExplanation: In this case, 6 units of rain water (blue section) are being trapped. Example 2:\nInput: height = [4, 2, 0, 3, 2, 5]\nOutput: 9",
            "constraints": "n == height.length\n0 <= n <= 3 * 104\n0 <= height[i] <= 105"
        },
        "3": {
            "name": "Substring with Concatenation of All Words",
            "problem": "You are given a string s and an array of strings words. You are to find all substrings in s thatConcatenationOfAllWords consists of each word in words exactly once and without any intervening characters.\nReturn all valid substrings in any order.",
            "examples": "Example 1:\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\nOutput: [0, 9]\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.\nExample 2:\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\nOutput: []",
            "constraints": "1 <= s.length <= 104\ns consists of only lowercase English letters.\n1 <= words.length <= 5000\n1 <= words[i].length <= 100\nAll the words of words are unique."
        },
        "4": {
            "name": "Merge k Sorted Lists",
            "problem": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.",
            "examples": "Example 1:\nInput: lists = [[1, 4, 5],[1, 3, 4],[2, 6]]\nOutput: [1, 1, 2, 3, 4, 4, 5, 6]\nExplanation: The linked-lists are:\n[1->4->5], [1->3->4], [2->6]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\nExample 2:\nInput: lists = []\nOutput: []\nExample 3:\nInput: lists = [[]]\nOutput: []",
            "constraints": "k == lists.length\n0 <= k <= 10^4\n0 <= lists[i].length <= 500\n-10^4 <= lists[i][j] <= 10^4\nlists[i] is sorted in non-decreasing order.\nThe length of lists[i] will be in the range [0, 50]."
        },
        "5": {
            "name": "Sudoku Solver",
            "problem": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.",
            "examples": "Example 1:\nInput: board = [\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [\n  [\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],\n  [\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],\n  [\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],\n  [\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],\n  [\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],\n  [\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],\n  [\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],\n  [\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],\n  [\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]",
            "constraints": "board.length == 9\nboard[i].length == 9\nboard[i][j] is a digit or '.'.\nIt is guaranteed that the input board has only one solution."
        }
    }
}